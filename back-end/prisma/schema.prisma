// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Patient {
  id             Int             @id @default(autoincrement())
  email          String          @unique @db.VarChar(255)
  firstName      String?         @db.VarChar(50)
  lastName       String?         @db.VarChar(50)
  firstNameKana  String?         @db.VarChar(50)
  lastNameKana   String?         @db.VarChar(50)
  password       String          @db.VarChar(255)
  birthDate      DateTime
  gender         Gender
  phoneNumber    String          @db.VarChar(20)
  postalCode     String          @db.VarChar(10)
  address        String          @db.VarChar(255)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  medicalRecords MedicalRecord[]
  appointments   Appointment[]
  TreatmentPlan  TreatmentPlan[]
  Prescription   Prescription[]
}

model MedicalRecord {
  id          Int      @id @default(autoincrement())
  patientId   Int
  patient     Patient  @relation(fields: [patientId], references: [id])
  date        DateTime
  description String   @db.VarChar(1000)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TreatmentPlan {
  id          Int      @id @default(autoincrement())
  patientId   Int
  patient     Patient  @relation(fields: [patientId], references: [id])
  name        String   @db.VarChar(100)
  description String   @db.VarChar(1000)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Prescription {
  id             Int      @id @default(autoincrement())
  patientId      Int
  patient        Patient  @relation(fields: [patientId], references: [id])
  medicationName String   @db.VarChar(100)
  dosage         String   @db.VarChar(50)
  frequency      String   @db.VarChar(50)
  duration       String   @db.VarChar(50)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Appointment {
  id          Int      @id @default(autoincrement())
  patientId   Int
  patient     Patient  @relation(fields: [patientId], references: [id])
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  description String   @db.VarChar(1000)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoice     Invoice?
}

model Invoice {
  id            Int           @id @default(autoincrement())
  appointmentId Int           @unique
  appointment   Appointment   @relation(fields: [appointmentId], references: [id])
  amount        Decimal       @db.Decimal(10, 2)
  status        InvoiceStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  payment       Payment?
}

model Payment {
  id        Int           @id @default(autoincrement())
  invoiceId Int           @unique
  invoice   Invoice       @relation(fields: [invoiceId], references: [id])
  amount    Decimal       @db.Decimal(10, 2)
  method    PaymentMethod
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model AnalyticsReport {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String   @db.VarChar(1000)
  startDate   DateTime
  endDate     DateTime
  data        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CASH
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
}
